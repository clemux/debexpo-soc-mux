#+TITLE:     soc-coordination.l.d.o reports for Clement Schreiner's project
#+AUTHOR:    Cl√©ment Schreiner
#+EMAIL:     clement@mux.me
#+DATE:      2012-08-19 Sun
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

* Final report: Semantic Package Review Interface for mentors.debian.net

# (This is a comment and will not be exported to the soc-coordination
# mail)

Hi,

this is the fifth and last bi-weekly report on my Summer of Code project
'Semantic Package Review Interface for mentors.debian.net'.

My project aims to extract metadata from packages submitted to
mentors.d.n[10], and use this data to match a mackage with a potential
sponsor. Since a lot of packages get stuck in the mentoring process
because their maintainers have difficulty finding a sponsor, this
should ease their entering the Debian process.


** Recent work

*** Plugin API

 I further improved the plugin API. Maybe I shouldn't have and
 finished the semantic metadata stuff, but I wanted to be sure I could
 store data from semantic plugins properly, so I don't have to rewrite
 them later.

**** Various changes making the plugins' code less verbose

  - the PluginResult subclasses now guess their 'entity name', used in
    the inheritance scheme to associate a SQL table with the right
    model

  - To define a PluginResult model as the result of a QA test, we use
    the new decorator 'test_result'. It sets an attribute to the
    class, that will be checked by the plugin when loading the model.

    I should explain what I mean by 'test result': QA plugins
    typically determine wether a package passes or fails some
    test. For example : the package is lintian clean / has lintian
    warnings; the bugs in the changes file's 'Closed-Bugs' section
    really belong to the package or not, etc.

     If needed, the test results' models can return data from other
    models (for example, the lintian plugin defines two models:
    LintianTest, the test's result, and LintianWarning, for
    representing a tag reported by the ``lintian`` program.

  - I wrote another decorator, ``importercmd``, which decorates
    plugins' method to make the importer (or, later, a controller)
    call them when importing data from a package


**** 'Property factories'

PluginResult models can define automatically generated properties for
integer, boolean and string fields. For example, the function
``bool_field will return a property for reading/writing a field as a
boolean, instead of explicitely using the underlying string.

I call these functions 'property factories', but there probably is a
better named for them.

Let's see a very simple, stripped down, example, the model for the
``native`` plugin (which determines whether the package is native or
not).

#+begin_src python
  @test_result
  class NativeTest(PluginResult):
      is_native = bool_field('native')
  
      def __str__(self):
          return 'Package is %s native' % ('' if self.is_native else 'not')
#+end_src

The ``bool_field`` function, defined in debexpo.plugins.api, is roughly
equivalent to this property:

#+begin_src python
  def fset(instance, value):
      instance['native'] = 'true' if value else 'false'
  
  is_native = property(
      lambda self: True if self.get('native', 'false') else False, # getter
      fset)                                                        # setter
  
#+end_src

Previously, the writers of plugins had to write a 'is_native' method
decorated with @property, and test the value of the sql column
themselves. This was especially cumbersome if they also wanted a
setter which type-coerce the value before storing it in the database.


# PENDING (some of this should be finished before the end of Sunday,
# otherwhise it will get into 'unsucesseful/for-after-gsoc tasks')
 - removed the plugin configuration switches and make
   'debexpo.plugins' a packages with several modules : qa,
   post_upload, etc.
 - action plugin that can be run before the package has been imported
   (getorigtarball should be one of those)
 - some plugins can be run at any time

    -> I'm not sure when. Maybe with a cron tab, or on some actions
    from the users.

    e.g.: after the user has edited a package's tags,
    the sponsor recommendation plugin is run again

 - special plugin with their own controller, for viewing/editing
   semantic metadata:
    + debtags :: the user should be able to verify and correct the
                 results from debtags heuristics
    + similar packages :: the maintainer (or any reviewer?) should be
         able to remove a package from the similar list, and that
         should be taken into account by the sponsor-recommendation
         plugin
    + feedback for sponsor recommendation :: "I'm not interested in
         sponsoring that package, remove me from the list"


*** Debtags heuristics
# PENDING (see

  #+ maybe, otherwise after the gsoc
  - small set of new heuristics: 'implemented in
    python/C/C++' (at least)

  #+ probably not before monday
  - Apriori heuristics and/or xapian relevance sets for tags suggestions

*** Sponsor recommendation

  -


** The summer of code is over, now what?

I will continue working on debexpo, and probably other (related)
parts of debian during the next months (or permanently?).

My priority will of course be to finish what I've started during this
summer of code:

*** GnuPG wrapper (soon, because it is needed on mentors.d.n)

   
This not really part of the summer of code, but there is not much work
to be done: in April I started rewriting debexpo's gnupg wrapper and
adding a 'Debian Machine Usage Policy' agreement form using the
former. I need to polish it, and migrate debexpo to the new API. And
then to finish the DMUP form (almost done):

 - finish/improve the UI for displaying tags and similar packages

 - UI for editing debtags


*** Semantic metadata, debtags

 - work with Enrico Zini to make debtags' heuristics easier to use
   outside debtagsd, and release them as a new library

 - write a lot more of debtags heuristics

 - manage packaging teams, and associate each with a set of debtags,
   for easily matching a package with potential teams
   
*** Sponsor preferences

 - extend the plugin system to allow writing small 'metadata plugins'
   that can easily be used by sponsors to define their 'Sponsoring
   preferences'

 - go through [[http://wiki.debian.org/SponsorChecklist]] and the
   preferences linked from there. Then write plugins to standardize
   all of those, and make it easy to determinate if a package meets
   registered sponsors preferences.

*** Sponsor recommendation
  
The current sponsor recommendation is more a proof-of-concept than a
complete new feature and probably will not be very useful to new
maintainers. I need to improve the UI and the underlying algorithms.

   

** Short summary for the summer 

# this will be written up in a few sentences instead of the bullet list
# in 3-5 lines, as asked by Ana

*** Successful
 
 - new plugin system. This API makes it possible to store data 'in an
   almost declarative way' [I need a better qualifier for that] for
   the results of plugins, and make it accessible outside the
   plugin. With a little more magic code, some plugins won't need to
   have their own templates anymore.
 - new plugin for associating tags with a package, using debtags'
   heuristics
 - new plugin for finding sponsors that might be interested by a
   package
 - I have written and kept up-to-date comprehensive docstrings for all
   new objects and methods (and some existings ones). This will not
   generate a perfect documentation, but improving it should be easy
   and will mostly be a matter of formating.

# PENDING/UNSURE: will be merged either in successful, unsuccessful,
# or in post-gsoc ideas, before sending the report
# ~ -> might be easy/quick to do
# ? -> maybe, otherwise during the coming weeks

 - default templates for plugins with data trivial to display
(trivial, I can do it before or just after sending the report)
 - ~ automatic tags from debtags (mostly done, but it needs more
   rules)
 - ? allow uploaders to add/remove tags themselveves
#    ^ probably too long to implement correctly, will be moved below
 - ~ display similar packages (almost done, just need a PluginResult
   subclass and the associated template)
 - ~ automatic sponsor recommendation (proof-of-concept: easy. But the
   results might not be useful. The plugin API should make it
   easy to improve, though)

*** Unsuccessful, not finished or needs polishing

 - Documentation :: Most of the code has good docstrings, but they
                    probably are not formatted correctly for sphinx
                    and they could be improved so that the arguments
                    and return types are explicitely stated

 - Sponsor recommendation :: this was the ultimate goal of the
      project, and it will not be ready (not sure it's really a
      failure) :(

# that's not all
 - ... 
   

** What I gained thanks to the Summer of Code

My work has served to improve debexpo/mentors.d.n (or at least, I hope
it did!), but it was also very positive for me:

First of all, I've learnt a lot about python development, particulary
about Python's object layer (inheritance, magic methods, attributes
access, among others). 

This project introduced me to sqlalchemy and pylons, and more
generally to web development.

I am more familiar with debian and its packaging system, and I am now
motivated for fixing bugs in packages or creating new packages when I
miss something, instead of waiting for someone to do it for me and
installing software without APT.

# ...

